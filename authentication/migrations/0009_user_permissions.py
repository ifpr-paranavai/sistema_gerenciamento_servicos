# Generated by Django 4.2.5 on 2024-11-15 13:21

from django.db import migrations
import sys

def create_features(apps, schema_editor):
    if sys.argv[1] == 'test':
        return
    Feature = apps.get_model('core', 'Feature')
    
    features = {
        'CAN_SHOW_APPOINTMENTS_MENU': 'Permissão para exibir o menu de agendamentos.',
        'CAN_SHOW_MESSAGES_MENU': 'Permissão para exibir o menu de mensagens.',
        'CAN_SHOW_DOCUMENTS_MENU': 'Permissão para exibir o menu de documentos.',
        'CAN_SHOW_SERVICES_MENU': 'Permissão para exibir o menu de serviços.',
        'CAN_SHOW_CLIENTS_MENU': 'Permissão para exibir o menu de clientes.',
        'CAN_SHOW_PROVIDERS_MENU': 'Permissão para exibir o menu de fornecedores.',
        'CAN_UPDATE_PROFILE': 'Permissão para atualizar o perfil.',
        'CAN_SHOW_HOME_DASHBOARDS': 'Permissão para exibir dashboards na página inicial.',
        'CAN_SHOW_HOME_DEFAULT': 'Permissão para exibir a página inicial padrão.',
        'CAN_SHOW_DIAGRAM_UML': 'Permissão para exibir diagramas UML.',
    }
    
    for name, description in features.items():
        Feature.objects.get_or_create(name=name, defaults={'description': description})

def populate_user_permissions(apps, schema_editor):
    if sys.argv[1] == 'test':
        return
    User = apps.get_model('authentication', 'User')
    Feature = apps.get_model('core', 'Feature')
    
    client_features = [
        'CAN_SHOW_APPOINTMENTS_MENU',
        'CAN_SHOW_MESSAGES_MENU',
        'CAN_SHOW_CLIENTS_MENU',
        'CAN_UPDATE_PROFILE',
        'CAN_SHOW_HOME_DEFAULT',
    ]

    provider_features = [
        'CAN_SHOW_APPOINTMENTS_MENU',
        'CAN_SHOW_MESSAGES_MENU',
        'CAN_SHOW_DOCUMENTS_MENU',
        'CAN_SHOW_SERVICES_MENU',
        'CAN_SHOW_PROVIDERS_MENU',
        'CAN_UPDATE_PROFILE',
        'CAN_SHOW_HOME_DASHBOARDS',
        'CAN_SHOW_DIAGRAM_UML',
    ]
    
    features = Feature.objects.all()

    feature_dict = {feature.name: feature for feature in features}
    
    users = User.objects.all()    
    if users is not None and len(users) > 0:
        for user in users:
            if user.role.role_type == 'client':
                user.features.add(*[feature_dict[feat] for feat in client_features if feat in feature_dict])
            elif user.role.role_type == 'provider':
                user.features.add(*[feature_dict[feat] for feat in provider_features if feat in feature_dict])
            

class Migration(migrations.Migration):

    dependencies = [
        ('authentication', '0008_remove_user_is_staff'),
    ]

    operations = [
        migrations.RunPython(create_features),
        migrations.RunPython(populate_user_permissions),
    ]
